// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.0
// source: protocols.proto

package main

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProtocolsServiceClient is the client API for ProtocolsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProtocolsServiceClient interface {
	CreateKey(ctx context.Context, in *CreateKeyRequest, opts ...grpc.CallOption) (*CreateKeyResponse, error)
	QueryKey(ctx context.Context, in *QueryKeyRequest, opts ...grpc.CallOption) (*QueryKeyResponse, error)
}

type protocolsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProtocolsServiceClient(cc grpc.ClientConnInterface) ProtocolsServiceClient {
	return &protocolsServiceClient{cc}
}

func (c *protocolsServiceClient) CreateKey(ctx context.Context, in *CreateKeyRequest, opts ...grpc.CallOption) (*CreateKeyResponse, error) {
	out := new(CreateKeyResponse)
	err := c.cc.Invoke(ctx, "/ProtocolsService/CreateKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolsServiceClient) QueryKey(ctx context.Context, in *QueryKeyRequest, opts ...grpc.CallOption) (*QueryKeyResponse, error) {
	out := new(QueryKeyResponse)
	err := c.cc.Invoke(ctx, "/ProtocolsService/QueryKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProtocolsServiceServer is the server API for ProtocolsService service.
// All implementations must embed UnimplementedProtocolsServiceServer
// for forward compatibility
type ProtocolsServiceServer interface {
	CreateKey(context.Context, *CreateKeyRequest) (*CreateKeyResponse, error)
	QueryKey(context.Context, *QueryKeyRequest) (*QueryKeyResponse, error)
	mustEmbedUnimplementedProtocolsServiceServer()
}

// UnimplementedProtocolsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProtocolsServiceServer struct {
}

func (UnimplementedProtocolsServiceServer) CreateKey(context.Context, *CreateKeyRequest) (*CreateKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKey not implemented")
}
func (UnimplementedProtocolsServiceServer) QueryKey(context.Context, *QueryKeyRequest) (*QueryKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryKey not implemented")
}
func (UnimplementedProtocolsServiceServer) mustEmbedUnimplementedProtocolsServiceServer() {}

// UnsafeProtocolsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProtocolsServiceServer will
// result in compilation errors.
type UnsafeProtocolsServiceServer interface {
	mustEmbedUnimplementedProtocolsServiceServer()
}

func RegisterProtocolsServiceServer(s grpc.ServiceRegistrar, srv ProtocolsServiceServer) {
	s.RegisterService(&ProtocolsService_ServiceDesc, srv)
}

func _ProtocolsService_CreateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolsServiceServer).CreateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProtocolsService/CreateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolsServiceServer).CreateKey(ctx, req.(*CreateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolsService_QueryKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolsServiceServer).QueryKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProtocolsService/QueryKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolsServiceServer).QueryKey(ctx, req.(*QueryKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProtocolsService_ServiceDesc is the grpc.ServiceDesc for ProtocolsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProtocolsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ProtocolsService",
	HandlerType: (*ProtocolsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateKey",
			Handler:    _ProtocolsService_CreateKey_Handler,
		},
		{
			MethodName: "QueryKey",
			Handler:    _ProtocolsService_QueryKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocols.proto",
}
